require File.join(File.dirname(__FILE__), 'spec_helper')

# All tests adapted from MPC 1.0.1's tests/tan.dat
describe MPC, '#tan' do
  it 'should calculate the tangent of huge values' do
    data = [
      [0, -1,  MPC.new([GMP::F(  "0x4580CBF242683p-3", 53, 16), GMP::F("-0x1B3E8A3660D279p-3", 53, 16)])],
      [0, -1,  MPC.new([GMP::F( "-0x4580CBF242683p-3", 53, 16), GMP::F("-0x1B3E8A3660D279p-3", 53, 16)])],
      [0,  1,  MPC.new([GMP::F("-0x1B3E8A3660D279p-3", 53, 16), GMP::F(  "0x4580CBF242683p-3", 53, 16)])]
    ]
    data.each do |expected_real, expected_imag, input|
      actual = input.tan
      actual.real.should eq GMP::F.new(expected_real)
      actual.imag.should eq GMP::F.new(expected_imag)
    end
  end

  it 'should calculate the tangent of some values taken from ttan.c' do
    data = [
      [["0x1D02967C31CDB5", 53, 16], ["0x1D02967C31CDB5", 53, 16], ["0x3243F6A8885A30p-53", 53, 16],  ["0x11A62633145C07p-106", 53, 16], MPC::MPC_RNDNN],
      [["0x1D02967C31CDB4", 53, 16], ["0x1D02967C31CDB5", 53, 16], ["0x3243F6A8885A30p-53", 53, 16],  ["0x11A62633145C07p-106", 53, 16], MPC::MPC_RNDDU],
      [["0x1D02967C31CDB4", 53, 16], ["0x1D02967C31CDB4", 53, 16], ["0x3243F6A8885A30p-53", 53, 16],  ["0x11A62633145C07p-106", 53, 16], MPC::MPC_RNDZD],
      [["-0xB0BD0AA4A3B3D", 53, 16], ["-0xB0BD0AA4A3B3D", 53, 16], ["0x1921FB54442D19p-52", 53, 16], ["-0x172CECE675D1FDp-105", 53, 16], MPC::MPC_RNDNN],
    ]
    data.each do |expected_real, expected_imag, input_real, input_imag, rounding_mode|
      actual = MPC.new([GMP::F.new(*input_real), GMP::F.new(*input_imag)]).tan(rounding_mode)
      actual.real.should eq GMP::F.new(*expected_real)
      actual.imag.should eq GMP::F.new(*expected_imag)
    end
  end

  it 'should calculate the tangent of a corner case: op = atan (2^(-k) + i*2^k) for k=200 and k=1000' do
    input_real = GMP::F.new("0x1.921fb54442d18469898cc51701b839a252049c1114cf98e804177d4c76273644a29410f31c6809bbdf2a33679a748636605614dbe4be286e9fc26adadaa3848bc90b6aecc4bcfd8de89884d34c6fdad617feb96de80d6fdbdc70d7f6b5133f4b5d3e4822f8963fcc9250cca3d9c8b67b8400f97142c77e0b31b4906c38", 1000, 16)
    input_imag = GMP::F.new("0x1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555548888888888888888888888888888888888888888888888888a@-50", 1000, 16)
    actual = MPC.new([input_real, input_imag], 1000).tan(MPC::MPC_RNDNN, 100, 100)
    actual.real.should eq GMP::F.new("0x1@-50", 100, 16)
    actual.imag.should eq GMP::F.new("0x1@50", 100, 16)
  end

  it 'should calculate the tangent of a corner case: op = atan (2^(-k) + i*2^k) for k=200 and k=1000' do
    input_real = GMP::F.new("0x1.921fb54442d18469898cc51701b839a252049c1114cf98e804177d4c76273644a29410f31c6809bbdf2a33679a748636605614dbe4be286e9fc26adadaa3848bc90b6aecc4bcfd8de89885d34c6fdad617feb96de80d6fdbdc70d7f6b5133f4b5d3e4822f8963fcc9250cca3d9c8b67b8400f97142c77e0b31b4906c38aba734d22c7f51fa499ebf06caba47b9475b2c38c5e6ac410aa5773daa520ee12d2cdace186a9c95793009e2e8d811943042f86520bc8c5c6d9c77c73cee58301d0c07364f0745d80f451f6b8abbe0de98a593bc5797ed2ab02e30732a92f9d52ad5ca2ba44c3131f40a202ae51cb51555885b5a662e1a08a0f46750aa4357be3974c9d9f70a08b1b7de1515d4e2aeba0c18fb672e1f0b4dc3c98f57eb5d19b61267ae3d1929c0944ac33b9dc7a44c35a5dcd7e25ff40db31410c9b0ec04e67d90d4c8a43e56302ef6401977c22eaef4c2bad8ee13118175b28dc411c49f40e9cb566287b6b7f9c1fa211c9705a2415242100234e478254f0fccaf10e334217b74b64d33864e30d5e9c4783528d0696c2a17b44b07d39455a899d1b77785b609bd1df25d1df8283f7d954c50f8b28e9cd780bb33652c9f412187444677430ca2b7cfda3ec252e19dc5af5f7037baec42e09039a00d224fab60b5532769d5311b1fbb830dff6fb9214d811e9be86b92680509246d87f56a", 4000, 16)
    input_imag = GMP::F.new("0x
    actual = MPC.new([input_real, input_imag], 4000).tan(MPC::MPC_RNDNN, 100, 100)
    actual.real.should eq GMP::F.new("0x1@-250", 100, 16)
    actual.imag.should eq GMP::F.new("0x1@250", 100, 16)
  end

  it 'should calculate the tangent of a corner case' do
    input_real = GMP::F.new("-0x16dp-8", 9, 16)
    input_imag = GMP::F.new("-0x77p-3", 9, 16)
    actual = MPC.new([input_real, input_imag], 9).tan(MPC::MPC_RNDNN, 9, 9)
    actual.real.should eq GMP::F.new("-0x9bp-51", 9, 16)
    actual.imag.should eq GMP::F.new(-1, 9)
  end
end
